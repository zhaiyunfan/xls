package test

chan in(bits[32], id=0, kind=streaming, ops=receive_only, flow_control=ready_valid, strictness=proven_mutually_exclusive, metadata="""""")
chan out(bits[32], id=1, kind=streaming, ops=send_only, flow_control=ready_valid, strictness=proven_mutually_exclusive, metadata="""""")

<span id="ir-function-f0" class="ir-function">top proc <span id="ir-function-def-f0" class="ir-function-identifier" data-identifier="f0">the_proc</span>(<span id="ir-node-def-f0_p1" class="ir-node-identifier ir-node-identifier-f0_p1 state-element-0" data-node-id="f0_p1" data-function-id="f0" data-state-element="0">x</span>: bits[32], <span id="ir-node-def-f0_p2" class="ir-node-identifier ir-node-identifier-f0_p2 state-element-1" data-node-id="f0_p2" data-function-id="f0" data-state-element="1">y</span>: bits[64], init={0, 42}) {
  <span id="ir-node-def-f0_3" class="ir-node-identifier ir-node-identifier-f0_3" data-node-id="f0_3" data-function-id="f0">tkn</span>: token = literal(value=token, id=3)
  <span id="ir-node-def-f0_4" class="ir-node-identifier ir-node-identifier-f0_4" data-node-id="f0_4" data-function-id="f0">rcv</span>: (token, bits[32]) = receive(<span class="ir-node-identifier ir-node-identifier-f0_3 ir-edge-f0_3-f0_4" data-node-id="f0_3" data-function-id="f0">tkn</span>, channel=in, id=4)
  <span id="ir-node-def-f0_6" class="ir-node-identifier ir-node-identifier-f0_6" data-node-id="f0_6" data-function-id="f0">rcv_data</span>: bits[32] = tuple_index(<span class="ir-node-identifier ir-node-identifier-f0_4 ir-edge-f0_4-f0_6" data-node-id="f0_4" data-function-id="f0">rcv</span>, index=1, id=6)
  <span id="ir-node-def-f0_5" class="ir-node-identifier ir-node-identifier-f0_5" data-node-id="f0_5" data-function-id="f0">rcv_token</span>: token = tuple_index(<span class="ir-node-identifier ir-node-identifier-f0_4 ir-edge-f0_4-f0_5" data-node-id="f0_4" data-function-id="f0">rcv</span>, index=0, id=5)
  <span id="ir-node-def-f0_7" class="ir-node-identifier ir-node-identifier-f0_7" data-node-id="f0_7" data-function-id="f0">next_x</span>: bits[32] = add(<span class="ir-node-identifier ir-node-identifier-f0_p1 ir-edge-f0_p1-f0_7" data-node-id="f0_p1" data-function-id="f0">x</span>, <span class="ir-node-identifier ir-node-identifier-f0_6 ir-edge-f0_6-f0_7" data-node-id="f0_6" data-function-id="f0">rcv_data</span>, id=7)
  <span id="ir-node-def-f0_10" class="ir-node-identifier ir-node-identifier-f0_10" data-node-id="f0_10" data-function-id="f0">one</span>: bits[1] = literal(value=1, id=10)
  <span id="ir-node-def-f0_8" class="ir-node-identifier ir-node-identifier-f0_8" data-node-id="f0_8" data-function-id="f0">not_y</span>: bits[64] = not(<span class="ir-node-identifier ir-node-identifier-f0_p2 ir-edge-f0_p2-f0_8" data-node-id="f0_p2" data-function-id="f0">y</span>, id=8)
  <span id="ir-node-def-f0_9" class="ir-node-identifier ir-node-identifier-f0_9" data-node-id="f0_9" data-function-id="f0">send</span>: token = send(<span class="ir-node-identifier ir-node-identifier-f0_5 ir-edge-f0_5-f0_9" data-node-id="f0_5" data-function-id="f0">rcv_token</span>, <span class="ir-node-identifier ir-node-identifier-f0_7 ir-edge-f0_7-f0_9" data-node-id="f0_7" data-function-id="f0">next_x</span>, channel=out, id=9)
  <span id="ir-node-def-f0_11" class="ir-node-identifier ir-node-identifier-f0_11" data-node-id="f0_11" data-function-id="f0">next_value_x</span>: () = next_value(param=<span class="ir-node-identifier ir-node-identifier-f0_p1 ir-edge-f0_p1-f0_11" data-node-id="f0_p1" data-function-id="f0">x</span>, value=<span class="ir-node-identifier ir-node-identifier-f0_7 ir-edge-f0_7-f0_11" data-node-id="f0_7" data-function-id="f0">next_x</span>, predicate=<span class="ir-node-identifier ir-node-identifier-f0_10 ir-edge-f0_10-f0_11" data-node-id="f0_10" data-function-id="f0">one</span>, id=11)
  <span id="ir-node-def-f0_12" class="ir-node-identifier ir-node-identifier-f0_12" data-node-id="f0_12" data-function-id="f0">next_value_y</span>: () = next_value(param=<span class="ir-node-identifier ir-node-identifier-f0_p2 ir-edge-f0_p2-f0_12" data-node-id="f0_p2" data-function-id="f0">y</span>, value=<span class="ir-node-identifier ir-node-identifier-f0_8 ir-edge-f0_8-f0_12" data-node-id="f0_8" data-function-id="f0">not_y</span>, predicate=<span class="ir-node-identifier ir-node-identifier-f0_10 ir-edge-f0_10-f0_12" data-node-id="f0_10" data-function-id="f0">one</span>, id=12)
}</span>
