
#ifndef {{ wrapped.header_guard }}
#define {{ wrapped.header_guard }}
#include <bit>
#include <memory>
#include <optional>

#include "absl/container/flat_hash_map.h"
#include "absl/status/status.h"
#include "absl/status/statusor.h"
#include "xls/common/status/status_macros.h"
#include "xls/jit/base_jit_wrapper.h"
#include "xls/public/value.h"

namespace {{ wrapped.namespace }} {

class {{ wrapped.class_name }} final : public xls::BaseProcJitWrapper {
 public:
  static absl::StatusOr<std::unique_ptr<{{ wrapped.class_name }}>> Create();

{% for chan in wrapped.incoming_channels %}
  absl::Status SendTo{{ chan.camel_name }}(xls::Value v) {
    return xls::BaseProcJitWrapper::SendToChannel(
        "{{ chan.xls_name }}", std::move(v));
  }

{% if chan.specialized_type %}
  absl::Status SendTo{{ chan.camel_name }}({{chan.specialized_type}} v) {
    {{ chan.packed_type }} view(std::bit_cast<uint8_t*>(&v), 0);
    return xls::BaseProcJitWrapper::SendToChannelPacked(
        "{{ chan.xls_name }}", view);
  }
{% endif %}
{% endfor %}

{% for chan in wrapped.outgoing_channels %}
{% if chan.specialized_type %}
  absl::StatusOr<std::optional<{{chan.specialized_type}}>>
  ReceiveFrom{{chan.camel_name}}() {
    {{chan.specialized_type}} result;
    {{chan.packed_type}} packed(std::bit_cast<uint8_t*>(&result), 0);
    XLS_ASSIGN_OR_RETURN(bool has_value,
                         xls::BaseProcJitWrapper::ReceiveFromChannelPacked(
                            "{{chan.xls_name}}", packed));
    if (has_value) {
      return result;
    }
    return std::nullopt;
  }
  absl::StatusOr<std::optional<xls::Value>>
  ReceiveFrom{{chan.camel_name}}AsValue() {
    return xls::BaseProcJitWrapper::ReceiveFromChannel("{{chan.xls_name}}");
  }
{% else %}
  absl::StatusOr<std::optional<xls::Value>> ReceiveFrom{{chan.camel_name}}() {
    return xls::BaseProcJitWrapper::ReceiveFromChannel("{{chan.xls_name}}");
  }
{% endif %}
{% endfor %}


 private:
  using xls::BaseProcJitWrapper::BaseProcJitWrapper;

  // For constructor.
  friend class xls::BaseProcJitWrapper;
};

}  // namespace {{ wrapped.namespace }}

#endif  // {{ wrapped.header_guard }}
