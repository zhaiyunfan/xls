module pipelined_proc(
  input wire clk,
  input wire rst,
  input wire out_ready,
  output wire [31:0] out_data,
  output wire out_valid
);
  reg [31:0] __counter;
  reg __odd_iteration;
  reg [31:0] p0___counter__1;
  reg [31:0] p0_lit1;
  reg p0_even_iteration;
  reg __counter_full;
  reg p0_valid;
  reg [31:0] __out_data_reg;
  reg __out_data_valid_reg;
  wire p1_all_active_states_valid;
  wire p1_all_active_inputs_valid;
  wire p1_stage_valid;
  wire out_data_valid_inv;
  wire __out_valid_buf;
  wire out_data_valid_load_en;
  wire out_data_load_en;
  wire p1_stage_done;
  wire p1_not_valid;
  wire p0_all_active_inputs_valid;
  wire p0_all_active_outputs_ready;
  wire p0_enable;
  wire p0_stage_done;
  wire p0_data_enable;
  wire and_1050;
  wire and_1051;
  wire [1:0] concat_1052;
  wire [31:0] incremented_counter;
  wire [31:0] lit1;
  wire or_1054;
  wire even_iteration;
  wire [31:0] one_hot_sel_1053;
  wire or_1056;
  assign p1_all_active_states_valid = 1'h1;
  assign p1_all_active_inputs_valid = 1'h1;
  assign p1_stage_valid = p1_all_active_states_valid & p0_valid;
  assign out_data_valid_inv = ~__out_data_valid_reg;
  assign __out_valid_buf = p1_all_active_inputs_valid & p1_stage_valid & 1'h1;
  assign out_data_valid_load_en = out_ready | out_data_valid_inv;
  assign out_data_load_en = __out_valid_buf & out_data_valid_load_en;
  assign p1_stage_done = p1_stage_valid & p1_all_active_inputs_valid & out_data_load_en;
  assign p1_not_valid = ~p0_valid;
  assign p0_all_active_inputs_valid = 1'h1;
  assign p0_all_active_outputs_ready = 1'h1;
  assign p0_enable = p1_stage_done | p1_not_valid;
  assign p0_stage_done = __counter_full & p0_all_active_inputs_valid & p0_all_active_outputs_ready;
  assign p0_data_enable = p0_enable & p0_stage_done;
  assign and_1050 = __odd_iteration & p0_data_enable;
  assign and_1051 = p0_even_iteration & p1_stage_done;
  assign concat_1052 = {and_1050, and_1051};
  assign incremented_counter = p0___counter__1 + p0_lit1;
  assign lit1 = 32'h0000_0001;
  assign or_1054 = and_1050 | and_1051;
  assign even_iteration = ~__odd_iteration;
  assign one_hot_sel_1053 = incremented_counter & {32{concat_1052[0]}} | lit1 & {32{concat_1052[1]}};
  assign or_1056 = p0_data_enable | or_1054;
  always @ (posedge clk) begin
    if (rst) begin
      __counter <= 32'h0000_0000;
      __odd_iteration <= 1'h0;
      p0___counter__1 <= 32'h0000_0000;
      p0_lit1 <= 32'h0000_0000;
      p0_even_iteration <= 1'h0;
      __counter_full <= 1'h1;
      p0_valid <= 1'h0;
      __out_data_reg <= 32'h0000_0000;
      __out_data_valid_reg <= 1'h0;
    end else begin
      __counter <= or_1054 ? one_hot_sel_1053 : __counter;
      __odd_iteration <= p0_data_enable ? even_iteration : __odd_iteration;
      p0___counter__1 <= p0_data_enable ? __counter : p0___counter__1;
      p0_lit1 <= p0_data_enable ? lit1 : p0_lit1;
      p0_even_iteration <= p0_data_enable ? even_iteration : p0_even_iteration;
      __counter_full <= or_1056 ? or_1054 : __counter_full;
      p0_valid <= p0_enable ? p0_stage_done : p0_valid;
      __out_data_reg <= out_data_load_en ? p0___counter__1 : __out_data_reg;
      __out_data_valid_reg <= out_data_valid_load_en ? __out_valid_buf : __out_data_valid_reg;
    end
  end
  assign out_data = __out_data_reg;
  assign out_valid = __out_data_valid_reg;
endmodule
