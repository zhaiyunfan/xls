// Copyright 2020 The XLS Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This package implements a 4x4 systolic array to multiply two
// 4x4 matrices. In this design, the weights"gains" are hardcoded
// into each matrix tile - these are set up as a 2x identity matrix,
// which is to say that any input will produce and output where each
// cell is twice that of the corresponding input cell.
package matmul_4x4

// Channel declarations.
// Each tile accepts an input activation from the "west" and passes
// it on to the "east" (except for the x == 3 tiles). The activations
// for the westmost tiles (x == 0) come from outside the grid.

// In addition, tiles (aside from y == 0) receive partial sums from
// the tiles to their "north" and use them in their calculations,
// as "result = activation * hardcoded_weight + partial_sum", then
// pass that partial sum to the "south".
//
// The final row of tiles (y == 3) pass their output out of the grid
// to the south.

// Each channel here is named as an input, i.e., "chan_1_3_x" is
// the x input (the activation) coming into tile (1, 3).
chan c_0_0_x(bits[32], id=0, kind=streaming, ops=receive_only, flow_control=none, metadata="")
chan c_0_1_x(bits[32], id=1, kind=streaming, ops=send_receive, flow_control=none, metadata="")
chan c_0_2_x(bits[32], id=2, kind=streaming, ops=send_receive, flow_control=none, metadata="")
chan c_0_3_x(bits[32], id=3, kind=streaming, ops=send_receive, flow_control=none, metadata="")

chan c_1_0_x(bits[32], id=10, kind=streaming, ops=receive_only, flow_control=none, metadata="")
chan c_1_1_x(bits[32], id=11, kind=streaming, ops=send_receive, flow_control=none, metadata="")
chan c_1_2_x(bits[32], id=12, kind=streaming, ops=send_receive, flow_control=none, metadata="")
chan c_1_3_x(bits[32], id=13, kind=streaming, ops=send_receive, flow_control=none, metadata="")
chan c_1_0_y(bits[32], id=14, kind=streaming, ops=send_receive, flow_control=none, metadata="")
chan c_1_1_y(bits[32], id=15, kind=streaming, ops=send_receive, flow_control=none, metadata="")
chan c_1_2_y(bits[32], id=16, kind=streaming, ops=send_receive, flow_control=none, metadata="")
chan c_1_3_y(bits[32], id=17, kind=streaming, ops=send_receive, flow_control=none, metadata="")

chan c_2_0_x(bits[32], id=20, kind=streaming, ops=receive_only, flow_control=none, metadata="")
chan c_2_1_x(bits[32], id=21, kind=streaming, ops=send_receive, flow_control=none, metadata="")
chan c_2_2_x(bits[32], id=22, kind=streaming, ops=send_receive, flow_control=none, metadata="")
chan c_2_3_x(bits[32], id=23, kind=streaming, ops=send_receive, flow_control=none, metadata="")
chan c_2_0_y(bits[32], id=24, kind=streaming, ops=send_receive, flow_control=none, metadata="")
chan c_2_1_y(bits[32], id=25, kind=streaming, ops=send_receive, flow_control=none, metadata="")
chan c_2_2_y(bits[32], id=26, kind=streaming, ops=send_receive, flow_control=none, metadata="")
chan c_2_3_y(bits[32], id=27, kind=streaming, ops=send_receive, flow_control=none, metadata="")

chan c_3_0_x(bits[32], id=30, kind=streaming, ops=receive_only, flow_control=none, metadata="")
chan c_3_1_x(bits[32], id=31, kind=streaming, ops=send_receive, flow_control=none, metadata="")
chan c_3_2_x(bits[32], id=32, kind=streaming, ops=send_receive, flow_control=none, metadata="")
chan c_3_3_x(bits[32], id=33, kind=streaming, ops=send_receive, flow_control=none, metadata="")
chan c_3_0_y(bits[32], id=34, kind=streaming, ops=send_receive, flow_control=none, metadata="")
chan c_3_1_y(bits[32], id=35, kind=streaming, ops=send_receive, flow_control=none, metadata="")
chan c_3_2_y(bits[32], id=36, kind=streaming, ops=send_receive, flow_control=none, metadata="")
chan c_3_3_y(bits[32], id=37, kind=streaming, ops=send_receive, flow_control=none, metadata="")

chan c_3_0_o(bits[32], id=44, kind=streaming, ops=send_only, flow_control=none, metadata="")
chan c_3_1_o(bits[32], id=45, kind=streaming, ops=send_only, flow_control=none, metadata="")
chan c_3_2_o(bits[32], id=46, kind=streaming, ops=send_only, flow_control=none, metadata="")
chan c_3_3_o(bits[32], id=47, kind=streaming, ops=send_only, flow_control=none, metadata="")

// Tile definitions.
// For the most part, tile implementations are the same, except for edge
// case handling (y == 0 tiles don't accept partial sums from the north,
// x == 3 tiles don't pass activations eastward).

// tile_0_0 has comments for each step, but the remainder elide them,
// as their functionality is essentially the same.
proc tile_0_0(state: (), init={()}) {
  // Create a new token; we have no cross-activation dependencies not already
  // expressed via state dependencies.
  my_token: token = literal(value=token, id=1)

  // Our baked-in weight/gain.
  literal.2: bits[32] = literal(value=2)

  // Receive an activation from the left.
  receive.3: (token, bits[32]) = receive(my_token, channel=c_0_0_x)

  // Compute our partial sum.
  tuple_index.4: token = tuple_index(receive.3, index=0)
  tuple_index.5: bits[32] = tuple_index(receive.3, index=1)
  umul.6: bits[32] = umul(literal.2, tuple_index.5)

  // Send our partial sum south.
  send.7: token = send(tuple_index.4, umul.6, channel=c_1_0_y)

  // Send our activation east.
  send.8: token = send(send.7, tuple_index.5, channel=c_0_1_x)

  next (state)
}

proc tile_0_1(state: (), init={()}) {
  my_token: token = literal(value=token)
  literal.101: bits[32] = literal(value=0)
  receive.102: (token, bits[32]) = receive(my_token, channel=c_0_1_x)
  tuple_index.103: token = tuple_index(receive.102, index=0)
  tuple_index.104: bits[32] = tuple_index(receive.102, index=1)
  umul.105: bits[32] = umul(literal.101, tuple_index.104)
  send.106: token = send(tuple_index.103, umul.105, channel=c_1_1_y)
  send.107: token = send(send.106, tuple_index.104, channel=c_0_2_x)
  next (state)
}

proc tile_0_2(state: (), init={()}) {
  my_token: token = literal(value=token)
  literal.201: bits[32] = literal(value=0)
  receive.202: (token, bits[32]) = receive(my_token, channel=c_0_2_x)
  tuple_index.203: token = tuple_index(receive.202, index=0)
  tuple_index.204: bits[32] = tuple_index(receive.202, index=1)
  umul.205: bits[32] = umul(literal.201, tuple_index.204)
  send.206: token = send(tuple_index.203, umul.205, channel=c_1_2_y)
  send.207: token = send(send.206, tuple_index.204, channel=c_0_3_x)
  next (state)
}

proc tile_0_3(state: (), init={()}) {
  my_token: token = literal(value=token)
  literal.301: bits[32] = literal(value=0)
  receive.302: (token, bits[32]) = receive(my_token, channel=c_0_3_x)
  tuple_index.303: token = tuple_index(receive.302, index=0)
  tuple_index.304: bits[32] = tuple_index(receive.302, index=1)
  umul.305: bits[32] = umul(literal.301, tuple_index.304)
  send.306: token = send(tuple_index.303, umul.305, channel=c_1_3_y)
  // Eastern-most tiles don't send activations any further.
  next (state)
}

proc tile_1_0(state: (), init={()}) {
  my_token: token = literal(value=token)
  literal.1001: bits[32] = literal(value=0)
  receive.1002: (token, bits[32]) = receive(my_token, channel=c_1_0_x)
  tuple_index.1003: token = tuple_index(receive.1002, index=0)
  tuple_index.1004: bits[32] = tuple_index(receive.1002, index=1)
  receive.1005: (token, bits[32]) = receive(tuple_index.1003, channel=c_1_0_y)
  tuple_index.1006: token = tuple_index(receive.1005, index=0)
  tuple_index.1007: bits[32] = tuple_index(receive.1005, index=1)
  umul.1008: bits[32] = umul(literal.1001, tuple_index.1004)
  add.1009: bits[32] = add(umul.1008, tuple_index.1007)
  send.1010: token = send(tuple_index.1006, add.1009, channel=c_2_0_y)
  send.1011: token = send(send.1010, tuple_index.1004, channel=c_1_1_x)
  next (state)
}

proc tile_1_1(state: (), init={()}) {
  my_token: token = literal(value=token)
  literal.1101: bits[32] = literal(value=2)
  receive.1102: (token, bits[32]) = receive(my_token, channel=c_1_1_x)
  tuple_index.1103: token = tuple_index(receive.1102, index=0)
  tuple_index.1104: bits[32] = tuple_index(receive.1102, index=1)
  receive.1105: (token, bits[32]) = receive(tuple_index.1103, channel=c_1_1_y)
  tuple_index.1106: token = tuple_index(receive.1105, index=0)
  tuple_index.1107: bits[32] = tuple_index(receive.1105, index=1)
  umul.1108: bits[32] = umul(literal.1101, tuple_index.1104)
  add.1109: bits[32] = add(umul.1108, tuple_index.1107)
  send.1110: token = send(tuple_index.1106, add.1109, channel=c_2_1_y)
  send.1111: token = send(send.1110, tuple_index.1104, channel=c_1_2_x)
  next (state)
}

proc tile_1_2(state: (), init={()}) {
  my_token: token = literal(value=token)
  literal.1201: bits[32] = literal(value=0)
  receive.1202: (token, bits[32]) = receive(my_token, channel=c_1_2_x)
  tuple_index.1203: token = tuple_index(receive.1202, index=0)
  tuple_index.1204: bits[32] = tuple_index(receive.1202, index=1)
  receive.1205: (token, bits[32]) = receive(tuple_index.1203, channel=c_1_2_y)
  tuple_index.1206: token = tuple_index(receive.1205, index=0)
  tuple_index.1207: bits[32] = tuple_index(receive.1205, index=1)
  umul.1208: bits[32] = umul(literal.1201, tuple_index.1204)
  add.1209: bits[32] = add(umul.1208, tuple_index.1207)
  send.1210: token = send(tuple_index.1206, add.1209, channel=c_2_2_y)
  send.1211: token = send(send.1210, tuple_index.1204, channel=c_1_3_x)
  next (state)
}

proc tile_1_3(state: (), init={()}) {
  my_token: token = literal(value=token)
  literal.1301: bits[32] = literal(value=0)
  receive.1302: (token, bits[32]) = receive(my_token, channel=c_1_3_x)
  tuple_index.1303: token = tuple_index(receive.1302, index=0)
  tuple_index.1304: bits[32] = tuple_index(receive.1302, index=1)
  receive.1305: (token, bits[32]) = receive(tuple_index.1303, channel=c_1_3_y)
  tuple_index.1306: token = tuple_index(receive.1305, index=0)
  tuple_index.1307: bits[32] = tuple_index(receive.1305, index=1)
  umul.1308: bits[32] = umul(literal.1301, tuple_index.1304)
  add.1309: bits[32] = add(umul.1308, tuple_index.1307)
  send.1310: token = send(tuple_index.1306, add.1309, channel=c_2_3_y)
  // Eastern-most tiles don't send activations any further.
  next (state)
}

proc tile_2_0(state: (), init={()}) {
  my_token: token = literal(value=token)
  literal.2001: bits[32] = literal(value=0)
  receive.2002: (token, bits[32]) = receive(my_token, channel=c_2_0_x)
  tuple_index.2003: token = tuple_index(receive.2002, index=0)
  tuple_index.2004: bits[32] = tuple_index(receive.2002, index=1)
  receive.2005: (token, bits[32]) = receive(tuple_index.2003, channel=c_2_0_y)
  tuple_index.2006: token = tuple_index(receive.2005, index=0)
  tuple_index.2007: bits[32] = tuple_index(receive.2005, index=1)
  umul.2008: bits[32] = umul(literal.2001, tuple_index.2004)
  add.2009: bits[32] = add(umul.2008, tuple_index.2007)
  send.2010: token = send(tuple_index.2006, add.2009, channel=c_3_0_y)
  send.2011: token = send(send.2010, tuple_index.2004, channel=c_2_1_x)
  next (state)
}

proc tile_2_1(state: (), init={()}) {
  my_token: token = literal(value=token)
  literal.2101: bits[32] = literal(value=0)
  receive.2102: (token, bits[32]) = receive(my_token, channel=c_2_1_x)
  tuple_index.2103: token = tuple_index(receive.2102, index=0)
  tuple_index.2104: bits[32] = tuple_index(receive.2102, index=1)
  receive.2105: (token, bits[32]) = receive(tuple_index.2103, channel=c_2_1_y)
  tuple_index.2106: token = tuple_index(receive.2105, index=0)
  tuple_index.2107: bits[32] = tuple_index(receive.2105, index=1)
  umul.2108: bits[32] = umul(literal.2101, tuple_index.2104)
  add.2109: bits[32] = add(umul.2108, tuple_index.2107)
  send.2110: token = send(tuple_index.2106, add.2109, channel=c_3_1_y)
  send.2111: token = send(send.2110, tuple_index.2104, channel=c_2_2_x)
  next (state)
}

proc tile_2_2(state: (), init={()}) {
  my_token: token = literal(value=token)
  literal.2201: bits[32] = literal(value=2)
  receive.2202: (token, bits[32]) = receive(my_token, channel=c_2_2_x)
  tuple_index.2203: token = tuple_index(receive.2202, index=0)
  tuple_index.2204: bits[32] = tuple_index(receive.2202, index=1)
  receive.2205: (token, bits[32]) = receive(tuple_index.2203, channel=c_2_2_y)
  tuple_index.2206: token = tuple_index(receive.2205, index=0)
  tuple_index.2207: bits[32] = tuple_index(receive.2205, index=1)
  umul.2208: bits[32] = umul(literal.2201, tuple_index.2204)
  add.2209: bits[32] = add(umul.2208, tuple_index.2207)
  send.2210: token = send(tuple_index.2206, add.2209, channel=c_3_2_y)
  send.2211: token = send(send.2210, tuple_index.2204, channel=c_2_3_x)
  next (state)
}

proc tile_2_3(state: (), init={()}) {
  my_token: token = literal(value=token)
  literal.2301: bits[32] = literal(value=0)
  receive.2302: (token, bits[32]) = receive(my_token, channel=c_2_3_x)
  tuple_index.2303: token = tuple_index(receive.2302, index=0)
  tuple_index.2304: bits[32] = tuple_index(receive.2302, index=1)
  receive.2305: (token, bits[32]) = receive(tuple_index.2303, channel=c_2_3_y)
  tuple_index.2306: token = tuple_index(receive.2305, index=0)
  tuple_index.2307: bits[32] = tuple_index(receive.2305, index=1)
  umul.2308: bits[32] = umul(literal.2301, tuple_index.2304)
  add.2309: bits[32] = add(umul.2308, tuple_index.2307)
  send.2310: token = send(tuple_index.2306, add.2309, channel=c_3_3_y)
  // Eastern-most tiles don't send activations any further.
  next (state)
}

proc tile_3_0(state: (), init={()}) {
  my_token: token = literal(value=token)
  literal.3001: bits[32] = literal(value=0)
  receive.3002: (token, bits[32]) = receive(my_token, channel=c_3_0_x)
  tuple_index.3003: token = tuple_index(receive.3002, index=0)
  tuple_index.3004: bits[32] = tuple_index(receive.3002, index=1)
  receive.3005: (token, bits[32]) = receive(tuple_index.3003, channel=c_3_0_y)
  tuple_index.3006: token = tuple_index(receive.3005, index=0)
  tuple_index.3007: bits[32] = tuple_index(receive.3005, index=1)
  umul.3008: bits[32] = umul(literal.3001, tuple_index.3004)
  add.3009: bits[32] = add(umul.3008, tuple_index.3007)
  send.3010: token = send(tuple_index.3006, add.3009, channel=c_3_0_o)
  send.3011: token = send(send.3010, tuple_index.3004, channel=c_3_1_x)
  next (state)
}

proc tile_3_1(state: (), init={()}) {
  my_token: token = literal(value=token)
  literal.3101: bits[32] = literal(value=0)
  receive.3102: (token, bits[32]) = receive(my_token, channel=c_3_1_x)
  tuple_index.3103: token = tuple_index(receive.3102, index=0)
  tuple_index.3104: bits[32] = tuple_index(receive.3102, index=1)
  receive.3105: (token, bits[32]) = receive(tuple_index.3103, channel=c_3_1_y)
  tuple_index.3106: token = tuple_index(receive.3105, index=0)
  tuple_index.3107: bits[32] = tuple_index(receive.3105, index=1)
  umul.3108: bits[32] = umul(literal.3101, tuple_index.3104)
  add.3109: bits[32] = add(umul.3108, tuple_index.3107)
  send.3110: token = send(tuple_index.3106, add.3109, channel=c_3_1_o)
  send.3111: token = send(send.3110, tuple_index.3104, channel=c_3_2_x)
  next (state)
}

proc tile_3_2(state: (), init={()}) {
  my_token: token = literal(value=token)
  literal.3201: bits[32] = literal(value=0)
  receive.3202: (token, bits[32]) = receive(my_token, channel=c_3_2_x)
  tuple_index.3203: token = tuple_index(receive.3202, index=0)
  tuple_index.3204: bits[32] = tuple_index(receive.3202, index=1)
  receive.3205: (token, bits[32]) = receive(tuple_index.3203, channel=c_3_2_y)
  tuple_index.3206: token = tuple_index(receive.3205, index=0)
  tuple_index.3207: bits[32] = tuple_index(receive.3205, index=1)
  umul.3208: bits[32] = umul(literal.3201, tuple_index.3204)
  add.3209: bits[32] = add(umul.3208, tuple_index.3207)
  send.3210: token = send(tuple_index.3206, add.3209, channel=c_3_2_o)
  send.3211: token = send(send.3210, tuple_index.3204, channel=c_3_3_x)
  next (state)
}

proc tile_3_3(state: (), init={()}) {
  my_token: token = literal(value=token)
  literal.3301: bits[32] = literal(value=2)
  receive.3302: (token, bits[32]) = receive(my_token, channel=c_3_3_x)
  tuple_index.3303: token = tuple_index(receive.3302, index=0)
  tuple_index.3304: bits[32] = tuple_index(receive.3302, index=1)
  receive.3305: (token, bits[32]) = receive(tuple_index.3303, channel=c_3_3_y)
  tuple_index.3306: token = tuple_index(receive.3305, index=0)
  tuple_index.3307: bits[32] = tuple_index(receive.3305, index=1)
  umul.3308: bits[32] = umul(literal.3301, tuple_index.3304)
  add.3309: bits[32] = add(umul.3308, tuple_index.3307)
  send.3310: token = send(tuple_index.3306, add.3309, channel=c_3_3_o)
  // Eastern-most tiles don't send activations any further.
  next (state)
}
