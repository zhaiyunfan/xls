package test_module

file_number 0 "test_module.x"

chan test_module__my_chan(bits[32], id=0, kind=streaming, ops=send_receive, flow_control=ready_valid, strictness=proven_mutually_exclusive, metadata="""""")
chan test_module__chan0(bits[32], id=1, kind=streaming, ops=send_receive, flow_control=ready_valid, strictness=proven_mutually_exclusive, metadata="""""")
chan test_module__chan1(bits[32], id=2, kind=streaming, ops=send_receive, flow_control=ready_valid, strictness=proven_mutually_exclusive, metadata="""""")
chan test_module__chan2(bits[32], id=3, kind=streaming, ops=send_receive, flow_control=ready_valid, strictness=proven_mutually_exclusive, metadata="""""")
chan test_module__chan3(bits[32], id=4, kind=streaming, ops=send_receive, flow_control=ready_valid, strictness=proven_mutually_exclusive, metadata="""""")

fn __test_module__foo.init() -> bits[32] {
  ret literal.1: bits[32] = literal(value=0, id=1)
}

top proc __test_module__main_0_next(__state: (), init={()}) {
  __token: token = literal(value=token, id=2)
  literal.4: bits[1] = literal(value=1, id=4)
  tuple.5: () = tuple(id=5)
  next (tuple.5)
}

proc __test_module__main__foo_0_next(__state: bits[32], init={0}) {
  __token: token = literal(value=token, id=6)
  zero_ext.9: bits[32] = zero_ext(__state, new_bit_count=32, id=9)
  tok0: token = send(__token, zero_ext.9, channel=test_module__chan0, id=10)
  zero_ext.15: bits[32] = zero_ext(__state, new_bit_count=32, id=15)
  zero_ext.11: bits[32] = zero_ext(__state, new_bit_count=32, id=11)
  zero_ext.13: bits[32] = zero_ext(__state, new_bit_count=32, id=13)
  zero_ext.17: bits[32] = zero_ext(__state, new_bit_count=32, id=17)
  tok3: token = send(tok0, zero_ext.15, channel=test_module__chan0, id=16)
  tok1: token = send(__token, zero_ext.11, channel=test_module__chan1, id=12)
  tok2: token = send(__token, zero_ext.13, channel=test_module__chan2, id=14)
  send.18: token = send(tok0, zero_ext.17, channel=test_module__chan0, id=18)
  receive.20: (token, bits[32]) = receive(tok3, channel=test_module__chan3, id=20)
  literal.24: bits[32] = literal(value=1, id=24)
  literal.8: bits[1] = literal(value=1, id=8)
  tok: token = after_all(tok0, tok1, tok2, send.18, id=19)
  tuple_index.21: token = tuple_index(receive.20, index=0, id=21)
  tok__1: token = tuple_index(receive.20, index=0, id=22)
  value: bits[32] = tuple_index(receive.20, index=1, id=23)
  add.25: bits[32] = add(__state, literal.24, id=25)
  next (add.25)
}
