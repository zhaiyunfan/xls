package test_module

file_number 0 "test_module.x"

chan test_module__my_chan(bits[32], id=0, kind=streaming, ops=send_receive, flow_control=ready_valid, strictness=proven_mutually_exclusive, metadata="""""")

fn __test_module__producer.init() -> bits[1] {
  ret literal.1: bits[1] = literal(value=0, id=1)
}

fn __test_module__consumer.init() -> bits[1] {
  ret literal.2: bits[1] = literal(value=0, id=2)
}

top proc __test_module__main_0_next(__state: (), init={()}) {
  __token: token = literal(value=token, id=3)
  literal.5: bits[1] = literal(value=1, id=5)
  tuple.6: () = tuple(id=6)
  next (tuple.6)
}

proc __test_module__main__producer_0_next(__state: bits[1], init={0}) {
  __token: token = literal(value=token, id=7)
  zero_ext.10: bits[32] = zero_ext(__state, new_bit_count=32, id=10)
  literal.9: bits[1] = literal(value=1, id=9)
  send.11: token = send(__token, zero_ext.10, predicate=__state, channel=test_module__my_chan, id=11)
  not.12: bits[1] = not(__state, id=12)
  next (not.12)
}

proc __test_module__main__consumer_0_next(__state: bits[1], init={0}) {
  __token: token = literal(value=token, id=13)
  receive.17: (token, bits[32]) = receive(__token, predicate=__state, channel=test_module__my_chan, id=17)
  literal.16: bits[32] = literal(value=42, id=16)
  tuple_index.19: bits[32] = tuple_index(receive.17, index=1, id=19)
  tuple_index.18: token = tuple_index(receive.17, index=0, id=18)
  sel.20: bits[32] = sel(__state, cases=[literal.16, tuple_index.19], id=20)
  tuple.21: (token, bits[32]) = tuple(tuple_index.18, sel.20, id=21)
  literal.15: bits[1] = literal(value=1, id=15)
  tuple_index.22: token = tuple_index(tuple.21, index=0, id=22)
  foo: bits[32] = tuple_index(tuple.21, index=1, id=23)
  not.24: bits[1] = not(__state, id=24)
  next (not.24)
}
