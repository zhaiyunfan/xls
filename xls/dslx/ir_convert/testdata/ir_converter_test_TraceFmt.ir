package test_module

file_number 0 "test_module.x"

chan test_module__input_c(bits[32], id=0, kind=streaming, ops=send_only, flow_control=ready_valid, strictness=proven_mutually_exclusive, metadata="""""")

fn __itok__test_module__trace_and_add(__token: token, __activated: bits[1], x: bits[32]) -> (token, bits[32]) {
  trace.4: token = trace(__token, __activated, format="x = {}", data_operands=[x], id=4)
  literal.5: bits[32] = literal(value=1, id=5)
  after_all.7: token = after_all(trace.4, id=7)
  add.6: bits[32] = add(x, literal.5, id=6)
  ret tuple.8: (token, bits[32]) = tuple(after_all.7, add.6, id=8)
}

fn __itok__test_module__assert_trace_and_add(__token: token, __activated: bits[1], x: bits[32]) -> (token, bits[32]) {
  literal.12: bits[32] = literal(value=5, id=12)
  eq.13: bits[1] = eq(x, literal.12, id=13)
  and.16: bits[1] = and(__activated, eq.13, id=16)
  not.17: bits[1] = not(and.16, id=17)
  invoke.22: (token, bits[32]) = invoke(__token, __activated, x, to_apply=__itok__test_module__trace_and_add, id=22)
  literal.15: bits[32] = literal(value=0, id=15)
  assert.18: token = assert(__token, not.17, message="Assertion failure via fail! @ test_module.x:8:28-8:49", label="x_is_now_5", id=18)
  tuple_index.23: token = tuple_index(invoke.22, index=0, id=23)
  literal.20: bits[32] = literal(value=0, id=20)
  identity.19: bits[32] = identity(literal.15, id=19)
  after_all.25: token = after_all(assert.18, tuple_index.23, id=25)
  tuple_index.24: bits[32] = tuple_index(invoke.22, index=1, id=24)
  literal.14: bits[8][10] = literal(value=[120, 95, 105, 115, 95, 110, 111, 119, 95, 53], id=14)
  sel.21: bits[32] = sel(eq.13, cases=[literal.20, identity.19], id=21)
  ret tuple.26: (token, bits[32]) = tuple(after_all.25, tuple_index.24, id=26)
}

top proc __test_module__main_0_next(__state: bits[32], init={0}) {
  __token: token = literal(value=token, id=27)
  literal.29: bits[1] = literal(value=1, id=29)
  after_all.30: token = after_all(id=30)
  invoke.32: (token, bits[32]) = invoke(__token, literal.29, __state, to_apply=__itok__test_module__assert_trace_and_add, id=32)
  tok: token = send(after_all.30, __state, channel=test_module__input_c, id=31)
  tuple_index.33: token = tuple_index(invoke.32, index=0, id=33)
  tuple_index.34: bits[32] = tuple_index(invoke.32, index=1, id=34)
  next (tuple_index.34)
}
