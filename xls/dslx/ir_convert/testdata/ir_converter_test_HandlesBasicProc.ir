package test_module

file_number 0 "test_module.x"

chan test_module__my_chan(bits[32], id=0, kind=streaming, ops=send_receive, flow_control=ready_valid, strictness=proven_mutually_exclusive, metadata="""""")

fn __test_module__producer.init() -> bits[32] {
  ret literal.1: bits[32] = literal(value=0, id=1)
}

fn __test_module__consumer.init() -> bits[32] {
  ret literal.2: bits[32] = literal(value=0, id=2)
}

top proc __test_module__main_0_next(__state: (), init={()}) {
  __token: token = literal(value=token, id=3)
  literal.5: bits[1] = literal(value=1, id=5)
  tuple.6: () = tuple(id=6)
  next (tuple.6)
}

proc __test_module__main__producer_0_next(__state: bits[32], init={0}) {
  after_all.10: token = after_all(id=10)
  literal.12: bits[32] = literal(value=1, id=12)
  __token: token = literal(value=token, id=7)
  literal.9: bits[1] = literal(value=1, id=9)
  tok: token = send(after_all.10, __state, channel=test_module__my_chan, id=11)
  add.13: bits[32] = add(__state, literal.12, id=13)
  next (add.13)
}

proc __test_module__main__consumer_0_next(__state: bits[32], init={0}) {
  after_all.17: token = after_all(id=17)
  receive.18: (token, bits[32]) = receive(after_all.17, channel=test_module__my_chan, id=18)
  i: bits[32] = tuple_index(receive.18, index=1, id=21)
  __token: token = literal(value=token, id=14)
  literal.16: bits[1] = literal(value=1, id=16)
  tuple_index.19: token = tuple_index(receive.18, index=0, id=19)
  tok: token = tuple_index(receive.18, index=0, id=20)
  add.22: bits[32] = add(i, i, id=22)
  next (add.22)
}
