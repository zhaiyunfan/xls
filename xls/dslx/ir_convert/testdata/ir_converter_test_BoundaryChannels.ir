package test_module

file_number 0 "test_module.x"

chan test_module__in_0(bits[32], id=0, kind=streaming, ops=receive_only, flow_control=ready_valid, strictness=proven_mutually_exclusive, metadata="""""")
chan test_module__in_1(bits[32], id=1, kind=streaming, ops=receive_only, flow_control=ready_valid, strictness=proven_mutually_exclusive, metadata="""""")
chan test_module__output(bits[32], id=2, kind=streaming, ops=send_only, flow_control=ready_valid, strictness=proven_mutually_exclusive, metadata="""""")

top proc __test_module__foo_0_next(__state: (), init={()}) {
  after_all.4: token = after_all(id=4)
  receive.5: (token, bits[32]) = receive(after_all.4, channel=test_module__in_0, id=5)
  tok: token = tuple_index(receive.5, index=0, id=7)
  receive.9: (token, bits[32]) = receive(tok, channel=test_module__in_1, id=9)
  a: bits[32] = tuple_index(receive.5, index=1, id=8)
  b: bits[32] = tuple_index(receive.9, index=1, id=12)
  tok__1: token = tuple_index(receive.9, index=0, id=11)
  add.13: bits[32] = add(a, b, id=13)
  __token: token = literal(value=token, id=1)
  literal.3: bits[1] = literal(value=1, id=3)
  tuple_index.6: token = tuple_index(receive.5, index=0, id=6)
  tuple_index.10: token = tuple_index(receive.9, index=0, id=10)
  tok__2: token = send(tok__1, add.13, channel=test_module__output, id=14)
  tuple.15: () = tuple(id=15)
  next (tuple.15)
}
