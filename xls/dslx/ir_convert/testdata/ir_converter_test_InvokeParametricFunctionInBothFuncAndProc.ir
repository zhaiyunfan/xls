package test_module

file_number 0 "test_module.x"

chan test_module__in_ch(bits[32], id=0, kind=streaming, ops=receive_only, flow_control=ready_valid, strictness=proven_mutually_exclusive, metadata="""""")
chan test_module__out_ch(bits[32], id=1, kind=streaming, ops=send_only, flow_control=ready_valid, strictness=proven_mutually_exclusive, metadata="""""")

fn __test_module__square__0(x: bits[32]) -> bits[32] {
  IMPL: bits[1] = literal(value=0, id=2)
  ret umul.3: bits[32] = umul(x, x, id=3)
}

fn __test_module__square_zero() -> bits[32] {
  literal.4: bits[32] = literal(value=0, id=4)
  ret invoke.5: bits[32] = invoke(literal.4, to_apply=__test_module__square__0, id=5)
}

proc __test_module__Counter_0_next(__state: bits[32], init={0}) {
  after_all.9: token = after_all(id=9)
  receive.10: (token, bits[32]) = receive(after_all.9, channel=test_module__in_ch, id=10)
  in_data: bits[32] = tuple_index(receive.10, index=1, id=13)
  x: bits[32] = invoke(in_data, to_apply=__test_module__square__0, id=14)
  tok: token = tuple_index(receive.10, index=0, id=12)
  next_state: bits[32] = add(__state, x, id=15)
  __token: token = literal(value=token, id=6)
  literal.8: bits[1] = literal(value=1, id=8)
  tuple_index.11: token = tuple_index(receive.10, index=0, id=11)
  tok__1: token = send(tok, next_state, channel=test_module__out_ch, id=16)
  next (next_state)
}
